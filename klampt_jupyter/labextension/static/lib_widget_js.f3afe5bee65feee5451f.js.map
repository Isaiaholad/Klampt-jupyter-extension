{"version":3,"file":"lib_widget_js.f3afe5bee65feee5451f.js","mappings":";;;;;;;;;AAAa;AACb;AACA;AACA;AACA,oDAAoD;AACpD,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,oCAAoC,gBAAgB;AACvF,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA,0CAA0C,4BAA4B;AACtE,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,sBAAsB;AACtB,2BAA2B,mBAAO,CAAC,yDAAO;AAC1C,qCAAqC,mBAAO,CAAC,yHAA4B;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B;AACxE;AACA;AACA;AACA;AACA,8CAA8C,sBAAsB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,4BAA4B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,wBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4BAA4B,oCAAoC;AAChE;AACA;AACA;AACA;AACA;AACA,4BAA4B,wBAAwB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,iBAAiB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA,6DAA6D,iBAAiB;AAC9E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAWJ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA,gCAAgC,yBAAyB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA,oCAAoC,yBAAyB;AAC7D;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAWJ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,0BAA0B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,2BAA2B;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,0BAA0B;AAC9D;AACA;AACA;AACA;AACA,wCAAwC,2BAA2B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,EAiBJ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;;;;;;;;;;;ACngCa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,GAAG,sBAAsB;AAC5C;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;;;;;;;;;;;ACpBa;AACb;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB,GAAG,mBAAmB;AACxC,eAAe,mBAAO,CAAC,oFAAuB;AAC9C,kBAAkB,mBAAO,CAAC,mCAAW;AACrC,yBAAyB,mBAAO,CAAC,iDAAkB;AACnD;AACA,mBAAO,CAAC,2CAAmB;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,uBAAuB,mRAAmR,yCAAyC,cAAc;AAC9Y;AACA;AACA,mBAAmB;AACnB,0CAA0C;AAC1C;AACA;AACA;AACA,sCAAsC;AACtC,iDAAiD;AACjwBAAwB,qBAAqB;AAC7C;AACA;AACA;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,4BAA4B,sBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,kBAAkB;AAClB;;;;;;;;;;ACnQA;AACA,kCAAkC,mBAAO,CAAC,qGAAgD;AAC1F;AACA;AACA,0CAA0C,oCAAoC,qBAAqB,GAAG;AACtG;AACA;;;;;;;;;;;;ACNa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA,4CAA4C,qBAAqB;AACjE;;AAEA;AACA,KAAK;AACL,KAAK;AACL;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,sBAAsB,iBAAiB;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,qBAAqB;AAC1C;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,+BAA+B;;AAE/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,EAAE;;;AAGF;AACA;AACA;AACA,qDAAqD,cAAc;AACnE;AACA;;;;;;;;;;AC7FA,UAAU,mBAAO,CAAC,oJAAwE;AAC1F,0BAA0B,mBAAO,CAAC,qHAAuD;;AAEzF;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA;;;;;;;;;;;AClBa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA,kBAAkB,wBAAwB;AAC1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAwC,GAAG,sBAAiB,GAAG,CAAI;;AAEnF;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,IAAI;AACJ;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,qEAAqE,qBAAqB,cAAc;;AAExG;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA,yDAAyD;AACzD,IAAI;;AAEJ;;;AAGA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,4BAA4B;AAChD;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,6BAA6B;AAClD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","sources":["webpack://klampt-jupyter-widget/./lib/KlamptFrontend.js","webpack://klampt-jupyter-widget/./lib/version.js","webpack://klampt-jupyter-widget/./lib/widget.js","webpack://klampt-jupyter-widget/./css/widget.css","webpack://klampt-jupyter-widget/./node_modules/css-loader/dist/runtime/api.js","webpack://klampt-jupyter-widget/./css/widget.css?a195","webpack://klampt-jupyter-widget/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"],"sourcesContent":["\"use strict\";\n///Depends on THREE (three.js)\n///\n///API:\n///frontend = new KlamptFrontend(sceneArea);        //constructor\n///KlamptFrontend.resize(w,h);           //set the width/height\n///KlamptFrontend.set_shadow(enabled);   //turns shadows on/off\n///KlamptFrontend.update_scene(scene);   //from a JSON message either requesting a whole scene, just a scene update, and possible RPC calls, updates the scene\n///KlamptFrontend.reset_scene();         //deletes evertyhing in the scene\n///KlamptFrontend.rpc(request);          //performs an RPC call from a kviz request object\n///KlamptFrontend.get_camera();          ///returns the current camera\n///KlamptFrontend.reset_camera();\n///\n///RPC calls are designed to be idempotent.\n///\n///Current RPC calls:\n///(note: ? that updates can be called with or without the given item.  =value indicates that a default value is used if the argument is not specified.)\n///- set_camera(position?,target?,up?,near?,far?);\n///- clear_extras()\n///- remove(object)\n///- set_color(object,rgba)\n///- set_visible(object,value)\n///- set_transform(object,matrix)\n///- add_text(name,x?,y?,text?)\n///- add_ghost(prefix_name,object)\n///- add_sphere(name,x?,y?,z?,r?)\n///- add_line(name,verts,width=1)\n///- add_xform(name,length,width=1)\n///- add_trilist(name,verts)\n///- add_trimesh(name,verts,indices)\n///- add_points(name,verts,colors=null,size=1)\n///- add_billboard(name,image,size,filter,colormap)\n///    OR\n///  add_billboard(name,imagedata,w,h,size,filter,colormap)\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KlamptFrontend = void 0;\nconst THREE = __importStar(require(\"three\"));\nconst three_trackballcontrols_ts_1 = require(\"three-trackballcontrols-ts\");\nfunction is_undefined_or_null(x) {\n    return (typeof x === 'undefined' || x === null);\n}\nfunction _power_of_2(n) {\n    return (n != 0) && (n & (n - 1)) == 0;\n}\nfunction onRemove(element, callback) {\n    const parent = element.parentNode;\n    if (!parent)\n        throw new Error(\"The node must already be attached\");\n    const obs = new MutationObserver(mutations => {\n        for (const mutation of mutations) {\n            for (let el in mutation.removedNodes) {\n                if (mutation.removedNodes[el] === element) {\n                    obs.disconnect();\n                    callback();\n                }\n            }\n        }\n    });\n    obs.observe(parent, {\n        childList: true,\n    });\n}\nclass KlamptFrontend {\n    constructor(dom_sceneArea) {\n        //the DOM element containing the scene\n        this.sceneArea = dom_sceneArea;\n        this.extras = new THREE.Group();\n        this.sceneCache = {};\n        this.width = 300;\n        this.height = 150;\n        this.scene = new THREE.Scene();\n        this.renderer = new THREE.WebGLRenderer();\n        //this.renderer = new THREE.WebGLRenderer({\n        //  preserveDrawingBuffer   : true   // required to support .toDataURL()\n        //});  \n        this.loader = new THREE.ObjectLoader();\n        this.sceneArea = dom_sceneArea;\n        //renderer.setClearColor(0x88888888);\n        this.renderer.setClearColor(0x888888FF);\n        this.renderer.shadowMap.enabled = true;\n        // to antialias the shadow\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n        while (dom_sceneArea.firstChild) {\n            dom_sceneArea.removeChild(dom_sceneArea.firstChild);\n        }\n        dom_sceneArea.appendChild(this.renderer.domElement); //attach the three.js renderer to the proper div \n        this.cameraCallback = null;\n        this.animating = false;\n        this.reset_camera();\n        this.reset_scene();\n        onRemove(dom_sceneArea, this.close.bind(this));\n        window.addEventListener('resize', this);\n        var _this = this;\n        let initBind = function () {\n            if (_this.sceneArea.clientWidth != 0 || _this.sceneArea.offsetWidth != 0) {\n                _this.resize(_this.sceneArea.clientWidth, _this.sceneArea.clientHeight);\n                _this.controls.update();\n                _this.render();\n            }\n            else {\n                setTimeout(initBind, 10);\n            }\n        };\n        setTimeout(initBind, 0);\n    }\n    handleEvent(event) {\n        if (event.type == 'resize') {\n            if (this.sceneArea.clientWidth != 0) {\n                this.resize(this.sceneArea.clientWidth, this.sceneArea.clientHeight);\n            }\n        }\n    }\n    close() {\n        console.log(\"Closing KlamptFrontend\");\n        this.animating = false;\n        window.removeEventListener('resize', this);\n        this.controls.dispose();\n        this.reset_scene();\n    }\n    set_shadow(enabled) {\n        this.renderer.shadowMap.enabled = enabled;\n    }\n    resize(w, h) {\n        console.log(\"KLAMPT.resize width: \" + w + \" height: \" + h);\n        this.width = w; //account for 5px padding on each side\n        this.height = h;\n        this.renderer.setSize(this.width, this.height);\n        this.camera.aspect = this.width / this.height;\n        this.camera.updateProjectionMatrix();\n        this.controls.handleResize();\n        this.render();\n    }\n    addObject(name, object) {\n        object.name = name;\n        this.sceneCache[name] = object;\n        this.extras.add(object);\n    }\n    getObject(name) {\n        let object = this.sceneCache[name];\n        if (object == null) {\n            let object2 = this.scene.getObjectByName(name);\n            if (object2 != null) {\n                this.sceneCache[name] = object2;\n            }\n            return object2;\n        }\n        return object;\n    }\n    removeObject(name) {\n        let obj = this.getObject(name);\n        if (obj) {\n            if (name in this.sceneCache) {\n                delete this.sceneCache[name];\n            }\n            let meshobj = obj;\n            if (!is_undefined_or_null(meshobj.geometry))\n                meshobj.geometry.dispose();\n            if (!is_undefined_or_null(meshobj.material))\n                meshobj.material.dispose();\n            obj.visible = false;\n            if (obj.parent != null)\n                obj.parent.remove(obj);\n        }\n        else {\n            let obj2 = this.sceneArea.querySelector(\"#_text_overlay_\" + name);\n            if (obj2 != null) {\n                if (obj2.parentNode != null)\n                    obj2.parentNode.removeChild(obj2);\n            }\n            else {\n                console.log(\"KLAMPT.rpc: Item to be removed \" + name + \" not found\");\n            }\n        }\n    }\n    //dataJ has a Three.js scene object format\n    _set_scene(dataJ) {\n        this.scene.traverse(function (child) {\n            let meshchild = child;\n            if (!is_undefined_or_null(meshchild.geometry))\n                meshchild.geometry.dispose();\n            if (!is_undefined_or_null(meshchild.material))\n                meshchild.material.dispose();\n        });\n        this.sceneCache = {};\n        this.scene = this.loader.parse(dataJ);\n        if (this.scene == null) {\n            console.log(\"KLAMPT.update_scene: Invalid scene sent from server\");\n            this.scene = new THREE.Scene();\n        }\n        let newItems;\n        newItems = [];\n        this.scene.traverse(function (child) {\n            if (!(child instanceof THREE.Light)) {\n                let meshchild = child;\n                if (!is_undefined_or_null(meshchild.geometry)) {\n                    if (meshchild.geometry instanceof THREE.Geometry) {\n                        meshchild.geometry.computeFaceNormals();\n                        console.log(\"Geometry: normals of \" + child.name + \" calculated\\n\");\n                    }\n                    else if (child instanceof THREE.Points) {\n                        //no normals needed here\n                    }\n                    else if (meshchild.geometry instanceof THREE.BufferGeometry) {\n                        if (is_undefined_or_null(meshchild.geometry.attributes.normal)) { //need to compute normals\n                            console.log(\"BufferGeometry: Computing normals of \" + child.name + \" from triangles\\n\");\n                            let positions = meshchild.geometry.attributes[\"position\"];\n                            if (meshchild.geometry.index == null)\n                                return;\n                            let indices = meshchild.geometry.index.array;\n                            let normals = new Float32Array(positions.array.length);\n                            for (let i = 0; i < positions.array.length; i++)\n                                normals[i] = 0.0;\n                            let vba = new THREE.Vector3();\n                            let vca = new THREE.Vector3();\n                            let vn = new THREE.Vector3();\n                            for (let tri = 0; tri < indices.length; tri += 3) {\n                                let a = indices[tri];\n                                let b = indices[tri + 1];\n                                let c = indices[tri + 2];\n                                vba.x = positions.array[b * 3] - positions.array[a * 3];\n                                vba.y = positions.array[b * 3 + 1] - positions.array[a * 3 + 1];\n                                vba.z = positions.array[b * 3 + 2] - positions.array[a * 3 + 2];\n                                vca.x = positions.array[c * 3] - positions.array[a * 3];\n                                vca.y = positions.array[c * 3 + 1] - positions.array[a * 3 + 1];\n                                vca.z = positions.array[c * 3 + 2] - positions.array[a * 3 + 2];\n                                vn.crossVectors(vba, vca);\n                                vn.normalize();\n                                normals[a * 3] += vn.x;\n                                normals[a * 3 + 1] += vn.y;\n                                normals[a * 3 + 2] += vn.z;\n                                normals[b * 3] += vn.x;\n                                normals[b * 3 + 1] += vn.y;\n                                normals[b * 3 + 2] += vn.z;\n                                normals[c * 3] += vn.x;\n                                normals[c * 3 + 1] += vn.y;\n                                normals[c * 3 + 2] += vn.z;\n                            }\n                            for (let i = 0; i < positions.array.length; i += 3) {\n                                vn.x = normals[i];\n                                vn.y = normals[i + 1];\n                                vn.z = normals[i + 2];\n                                vn.normalize();\n                                normals[i] = vn.x;\n                                normals[i + 1] = vn.y;\n                                normals[i + 2] = vn.z;\n                            }\n                            meshchild.geometry.setAttribute('normal', new THREE.BufferAttribute(normals, 3));\n                        }\n                        else {\n                            console.log(\"BufferGeometry Item \" + child.name + \" already has normals\\n\");\n                        }\n                    }\n                    else {\n                        console.log(\"Item \" + child.name + \" is neither a geometry or THREE.BufferGeometry\\n\");\n                    }\n                }\n                if (child.name == \"Terrain\") {\n                    child.receiveShadow = true;\n                    child.castShadow = true;\n                }\n                else {\n                    child.receiveShadow = true;\n                    child.castShadow = true;\n                }\n            }\n            else if (child instanceof THREE.DirectionalLight || child instanceof THREE.SpotLight) {\n                child.intensity *= 0.8;\n                child.castShadow = true;\n                //child.shadow.darkness = 0.3;\n                if (child instanceof THREE.DirectionalLight) {\n                    //child.position.set( 0, 0, 10 ); \n                    //child.shadow.camera.fov = 50;\n                    child.shadow.bias = -0.00001;\n                    child.shadow.mapSize.x = 1024;\n                    child.shadow.mapSize.y = 1024;\n                    child.shadow.camera.right = 5;\n                    child.shadow.camera.left = -5;\n                    child.shadow.camera.top = 5;\n                    child.shadow.camera.bottom = -5;\n                    /*\n                    let helper = new THREE.CameraHelper( light.shadow.camera );\n                    newItems.push( helper );\n          \n                    //hack for non-black shadows\n                    let shadowIntensity = 0.3;\n                    let light2 = child.clone();\n                    child.castShadow = false;\n                    light2.intensity = shadowIntensity;\n                    child.intensity = child.intensity - shadowIntensity;\n                    newItems.push(light2);\n                    */\n                }\n            }\n        });\n        this.scene.add(new THREE.AmbientLight(0xffffff, 0.2));\n        for (let i = 0; i < newItems.length; i++)\n            this.scene.add(newItems[i]);\n        let AxesHelper = new THREE.AxesHelper(0.2);\n        let linemat = AxesHelper.material;\n        linemat.linewidth = 2.0;\n        this.scene.add(AxesHelper);\n        this.extras = new THREE.Group();\n        this.scene.add(this.extras);\n    }\n    ///sceneObjects is a list of dictionaries, each containing the members \"name\" and \"matrix\"\n    _set_transforms(sceneObjects) {\n        for (let i = 0; i < sceneObjects.length; i++) {\n            //console.log(\"Update requested to: \" + sceneObjects[i].name);\n            //console.log(\"  new matrix is: \" + sceneObjects[i].matrix);\n            let object = this.getObject(sceneObjects[i].name);\n            if (object != null) {\n                //console.log(\"  we found \\\"\" + sceneObjects[i].name + \"\\\" in the Three.js scene\");\n                object.matrixAutoUpdate = false;\n                object.matrixWorldNeedsUpdate = true;\n                let m = sceneObjects[i].matrix;\n                object.matrix.set(m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]);\n            }\n            else {\n                console.log(\"KLAMPT.update_scene: Did not find \\\"\" + sceneObjects[i].name + \"\\\" in the Three.js scene\");\n            }\n        }\n    }\n    _setupBillboard(name, texture, size) {\n        let material;\n        if (!_power_of_2(texture.image.width) || !_power_of_2(texture.image.height)) {\n            console.log(\"Warning, texture does not have a power of two width / height: \" + texture.image.width + \",\" + texture.image.height);\n            return;\n        }\n        else {\n            if (texture.format == THREE.AlphaFormat || texture.format == THREE.LuminanceFormat) {\n                material = new THREE.MeshBasicMaterial({\n                    alphaMap: texture,\n                    transparent: true,\n                    opacity: 1\n                });\n            }\n            else {\n                material = new THREE.MeshBasicMaterial({\n                    map: texture\n                });\n            }\n        }\n        let obj = this.getObject(name);\n        let meshobj = obj;\n        meshobj.material = material;\n        meshobj.material.needsUpdate = true;\n    }\n    rpc(request) {\n        if (request.type == 'set_camera') {\n            let data = request;\n            if (data.up !== undefined) {\n                this.camera.up.x = data.up.x;\n                this.camera.up.y = data.up.y;\n                this.camera.up.z = data.up.z;\n            }\n            if (data.target !== undefined) {\n                this.controls.target.x = data.target.x;\n                this.controls.target.y = data.target.y;\n                this.controls.target.z = data.target.z;\n            }\n            if (data.position !== undefined) {\n                this.camera.position.x = data.position.x;\n                this.camera.position.y = data.position.y;\n                this.camera.position.z = data.position.z;\n            }\n            if (data.near !== undefined) {\n                this.camera.near = data.near;\n            }\n            if (data.far !== undefined) {\n                this.camera.far = data.far;\n            }\n            this.controls.update();\n        }\n        else if (request.type == \"clear_extras\") {\n            //clear scene\n            var _this = this;\n            this.extras.traverse(function (child) {\n                if (!is_undefined_or_null(child.name) && child.name in _this.sceneCache)\n                    delete _this.sceneCache[child.name];\n                let meshchild = child;\n                if (!is_undefined_or_null(meshchild.geometry))\n                    meshchild.geometry.dispose();\n                if (!is_undefined_or_null(meshchild.material))\n                    meshchild.material.dispose();\n            });\n            this.scene.remove(this.extras);\n            this.extras = new THREE.Group();\n            this.scene.add(this.extras);\n            //clear text\n            let overlayList = [];\n            for (let i = 0; i < this.sceneArea.children.length; i++) {\n                if (this.sceneArea.children[i].id.startsWith(\"_text_overlay_\")) {\n                    overlayList.push(this.sceneArea.children[i]);\n                    //console.log(\"Removing text item \"+sceneArea.children[i].id);\n                }\n            }\n            for (let i = 0; i < overlayList.length; i++) {\n                //console.log(\"Clearing text \"+overlayList[i].id);\n                this.sceneArea.removeChild(overlayList[i]);\n            }\n        }\n        else if (request.type == \"remove\") {\n            //remove object from scene\n            //console.log(\"Removing item \"+request.object);\n            this.removeObject(request.object);\n        }\n        else if (request.type == \"set_color\") {\n            let object_name = request.object;\n            let rgba = request.rgba;\n            let recursive = request.recursive;\n            //console.log(\"set_color requested. object: \" + object_name + \" rgba: \" + rgba); \n            let obj = this.getObject(object_name);\n            if (obj == null) {\n                console.log(\"KLAMPT.rpc: Invalid object name \" + object_name + \" specified in set_color\");\n            }\n            else {\n                let shared = (is_undefined_or_null(obj.userData.customSharedMaterialSetup));\n                //if(!is_undefined_or_null(typeof object.material))\n                //{\n                //  console.log(\"first checking if we've working this this material before\");\n                let mobj = obj;\n                if (recursive == true) {\n                    if (is_undefined_or_null(mobj.material)) {\n                        mobj.material = new THREE.MeshPhongMaterial();\n                        mobj.userData.customSharedMaterialSetup = true;\n                    }\n                    else if (shared) {\n                        mobj.material = mobj.material.clone();\n                        mobj.userData.customSharedMaterialSetup = true;\n                    }\n                    mobj.traverse(function (child) {\n                        let mchild = child;\n                        if (!is_undefined_or_null(mchild.material)) {\n                            let cshared = (is_undefined_or_null(child.userData.customSharedMaterialSetup));\n                            if (!cshared) {\n                                mchild.material.dispose();\n                            }\n                            mchild.material = mobj.material;\n                        }\n                    });\n                }\n                else {\n                    if (mobj.material == null) {\n                        mobj.material = new THREE.MeshPhongMaterial();\n                        mobj.userData.customSingleMaterialSetup = true;\n                    }\n                    else if (shared) {\n                        mobj.material = mobj.material.clone();\n                        mobj.userData.customSingleMaterialSetup = false;\n                    }\n                }\n                let mat = mobj.material;\n                mat.color.setRGB(rgba[0], rgba[1], rgba[2]);\n                if (rgba[3] != 1.0) {\n                    mat.transparent = true;\n                    mat.opacity = rgba[3];\n                }\n                else {\n                    if (mat.alphaMap != null)\n                        mat.transparent = true;\n                    else\n                        mat.transparent = false;\n                }\n                //}\n                //else\n                //{\n                //   console.log(\"ERROR: no material associated with object: \" + object_name);  \n                //   alert(\"ERROR: kviz.set_color is trying to set an object with no material\");\n                //}\n            }\n        }\n        else if (request.type == \"set_visible\") {\n            let object_name = request.object;\n            let visible = request.value;\n            //console.log(\"set_visible requested. object: \" + object_name + \" visible: \" + visible); \n            let object = this.getObject(object_name);\n            if (object == null) {\n                console.log(\"KLAMPT.rpc: Invalid object name \" + object_name + \" specified in set_visible\");\n            }\n            else {\n                object.visible = visible;\n            }\n        }\n        else if (request.type == \"add_ghost\") {\n            let object_name = request.object;\n            let prefix = request.prefix_name;\n            //console.log(\"add_ghost requested. object: \" + object_name + \" prefix: \" + prefix); \n            let old_ghost = this.getObject(prefix + object_name);\n            if (old_ghost == null) {\n                let object = this.getObject(object_name);\n                if (object != null) {\n                    let clone_object = object.clone(true);\n                    clone_object.traverse(function (child) {\n                        if (!is_undefined_or_null(child.name)) {\n                            child.name = prefix + child.name;\n                        }\n                        //ghosts should not cast shadows\n                        if (!is_undefined_or_null(child.castShadow)) {\n                            child.castShadow = false;\n                            child.receiveShadow = false;\n                        }\n                    });\n                    this.addObject(prefix + object_name, clone_object);\n                    console.log(\"KLAMPT.rpc: Added ghost with name \" + prefix + object_name);\n                }\n                else {\n                    console.log(\"KLAMPT.rpc: The ghost of object \" + object_name + \" could not be made since the object was not found\");\n                }\n            }\n            else {\n                //there's already a ghost with that name... should we re-clone?\n            }\n        }\n        else if (request.type == \"set_transform\") {\n            //console.log(\"KLAMPT.rpc: got a set_transform RPC request for: \" + request.object);\n            let object = this.getObject(request.object);\n            if (object != null) {\n                if (object.matrix) {\n                    object.matrixAutoUpdate = false;\n                    object.matrixWorldNeedsUpdate = true;\n                    let m = request.matrix;\n                    object.matrix.set(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]);\n                }\n                else\n                    console.log(\"KLAMPT.rpc: object does not have matrix property: \" + request.object);\n            }\n            else\n                console.log(\"KLAMPT.rpc: couldn't find object: \" + request.object);\n        }\n        else if (request.type == \"add_text\") {\n            //console.log(\"RPC to add text!\");   \n            let text2 = this.sceneArea.querySelector(\"#_text_overlay_\" + request.name);\n            if (text2 == null) {\n                let text3 = document.createElement('div');\n                text3.style.position = 'absolute';\n                text3.id = \"_text_overlay_\" + request.name;\n                text3.style.zIndex = \"1\"; // if you still don't see the label, try uncommenting this\n                //text2.style.width = 100;\n                //text2.style.height = 100;\n                //text2.style.backgroundColor = \"blue\";\n                if (request.text != null)\n                    text3.innerHTML = request.text;\n                text3.style.top = request.y + '%';\n                text3.style.left = request.x + '%';\n                this.sceneArea.appendChild(text3);\n            }\n            else {\n                if (!is_undefined_or_null(request.text))\n                    text2.innerHTML = request.text;\n                if (!is_undefined_or_null(request.x))\n                    text2.style.left = request.x + '%';\n                if (!is_undefined_or_null(request.y))\n                    text2.style.top = request.y + '%';\n            }\n        }\n        else if (request.type == \"add_sphere\") {\n            let sphere = this.getObject(request.name);\n            if (sphere == null) {\n                //console.log(\"RPC to add sphere!\"); \n                let slices = 20;\n                if (request.r < 0.05)\n                    slices = 6;\n                else if (request.r < 0.2)\n                    slices = 12;\n                let geometry = new THREE.SphereGeometry(1.0, slices, slices);\n                let material = new THREE.MeshPhongMaterial({ color: 0xAA0000 });\n                let sphere2 = new THREE.Mesh(geometry, material);\n                sphere2.userData.customSharedMaterialSetup = true;\n                sphere2.castShadow = true;\n                sphere2.scale.x = request.r;\n                sphere2.scale.y = request.r;\n                sphere2.scale.z = request.r;\n                sphere2.position.set(request.x, request.y, request.z);\n                this.addObject(request.name, sphere2);\n            }\n            else {\n                if (!is_undefined_or_null(request.x)) {\n                    sphere.position.set(request.x, request.y, request.z);\n                }\n                if (!is_undefined_or_null(request.r) && request.r > 0) {\n                    sphere.scale.x = request.r;\n                    sphere.scale.y = request.r;\n                    sphere.scale.z = request.r;\n                }\n            }\n        }\n        else if (request.type == \"add_line\") {\n            let obj = this.getObject(request.name);\n            if (obj == null) {\n                let geometry = new THREE.Geometry();\n                for (let i = 0; i < request.verts.length; i += 3) {\n                    geometry.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                }\n                //geometry.dynamic  = true;\n                let material = new THREE.LineBasicMaterial({ color: 0xAA0000 });\n                if (!is_undefined_or_null(request.width)) {\n                    material.linewidth = request.width;\n                }\n                let line = new THREE.Line(geometry, material);\n                line.userData.customSharedMaterialSetup = true;\n                this.addObject(request.name, line);\n            }\n            else {\n                let line = obj;\n                let lgeom = line.geometry;\n                lgeom.vertices = [];\n                for (let i = 0; i < request.verts.length; i += 3) {\n                    lgeom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                }\n                lgeom.verticesNeedUpdate = true;\n            }\n        }\n        else if (request.type == \"add_xform\") {\n            let xform = this.getObject(request.name);\n            if (xform != null)\n                this.removeObject(request.name);\n            let axis = new THREE.AxesHelper(request.length);\n            if (!is_undefined_or_null(request.width))\n                axis.material.linewidth = request.width;\n            this.addObject(request.name, axis);\n        }\n        else if (request.type == 'add_trilist') {\n            let obj = this.getObject(request.name);\n            if (obj == null) {\n                let geom = new THREE.Geometry();\n                //geom.dynamic = true;\n                for (let i = 0; i < request.verts.length; i += 3) {\n                    geom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                }\n                for (let i = 0; i < request.verts.length; i += 9) {\n                    geom.faces.push(new THREE.Face3(i / 3, i / 3 + 1, i / 3 + 2));\n                }\n                geom.computeFaceNormals();\n                let mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                mesh.castShadow = true;\n                mesh.userData.customSharedMaterialSetup = true;\n                this.addObject(request.name, mesh);\n            }\n            else {\n                let mobj = obj;\n                if (request.verts.length != mobj.geometry.vertices.length * 3 || true) {\n                    //might as well just completely recreate the geometry\n                    mobj.geometry.dispose();\n                    let geom = new THREE.Geometry();\n                    //geom.dynamic = true;\n                    for (let i = 0; i < request.verts.length; i += 3) {\n                        geom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                    }\n                    for (let i = 0; i < request.verts.length; i += 9) {\n                        geom.faces.push(new THREE.Face3(i / 3, i / 3 + 1, i / 3 + 2));\n                    }\n                    geom.computeFaceNormals();\n                    mobj.geometry = geom;\n                }\n                else {\n                    //for some reason this isn't working\n                    //console.log(\"Updating trilist vertices\");\n                    /*\n                    obj.geometry.dynamic = true;\n                    obj.geometry.verticesNeedUpdate = true;\n                   for(let i=0;i<request.verts.length;i+=3) {\n                      obj.geometry.vertices[i/3] = new THREE.Vector3(request.verts[i],request.verts[i+1],request.verts[i+2]);\n                   }\n                    obj.geometry.computeFaceNormals();\n                    */\n                }\n            }\n        }\n        else if (request.type == 'add_trimesh') {\n            let obj = this.getObject(request.name);\n            if (obj == null) {\n                let geom = new THREE.Geometry();\n                //geom.dynamic = true;\n                for (let i = 0; i < request.verts.length; i += 3) {\n                    geom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                }\n                for (let i = 0; i < request.tris.length; i += 3) {\n                    geom.faces.push(new THREE.Face3(request.tris[i], request.tris[i + 1], request.tris[i + 2]));\n                }\n                geom.computeFaceNormals();\n                let mesh = new THREE.Mesh(geom, new THREE.MeshPhongMaterial());\n                mesh.castShadow = true;\n                mesh.userData.customSharedMaterialSetup = true;\n                this.addObject(request.name, mesh);\n            }\n            else {\n                let mobj = obj;\n                if (request.verts.length != mobj.geometry.vertices.length * 3 || true) {\n                    //might as well just completely recreate the geometry\n                    mobj.geometry.dispose();\n                    let geom = new THREE.Geometry();\n                    //geom.dynamic = true;\n                    for (let i = 0; i < request.verts.length; i += 3) {\n                        geom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                    }\n                    for (let i = 0; i < request.tris.length; i += 3) {\n                        geom.faces.push(new THREE.Face3(request.tris[i], request.tris[i + 1], request.tris[i + 2]));\n                    }\n                    geom.computeFaceNormals();\n                    mobj.geometry = geom;\n                }\n                else {\n                    //for some reason this isn't working\n                    //console.log(\"Updating trimesh vertices\");\n                    /*\n                    obj.geometry.dynamic = true;\n                    obj.geometry.verticesNeedUpdate = true;\n                    for(let i=0;i<request.verts.length;i+=3) {\n                       obj.geometry.vertices[i/3] = new THREE.Vector3(request.verts[i],request.verts[i+1],request.verts[i+2]);\n                    }\n                    obj.geometry.computeFaceNormals();\n                    */\n                }\n            }\n        }\n        else if (request.type == 'add_points') {\n            let obj = this.getObject(request.name);\n            if (obj == null) {\n                let geom = new THREE.Geometry();\n                //geom.dynamic = true;\n                for (let i = 0; i < request.verts.length; i += 3) {\n                    geom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                }\n                let mat = new THREE.PointsMaterial();\n                if (request.size)\n                    mat.size = request.size;\n                else\n                    mat.size = 1;\n                if (request.colors) {\n                    mat.vertexColors = true;\n                    for (let i = 0; i < request.colors.length; i++) {\n                        geom.colors.push(new THREE.Color(request.colors[i]));\n                    }\n                }\n                else {\n                    mat.color = new THREE.Color(0xffffff);\n                }\n                let pts = new THREE.Points(geom, mat);\n                pts.castShadow = false;\n                pts.userData.customSharedMaterialSetup = true;\n                this.addObject(request.name, pts);\n            }\n            else {\n                let mobj = obj;\n                if (request.verts.length != mobj.geometry.vertices.length * 3 || true) {\n                    //might as well just completely recreate the geometry\n                    mobj.geometry.dispose();\n                    let geom = new THREE.Geometry();\n                    //geom.dynamic = true;\n                    for (let i = 0; i < request.verts.length; i += 3) {\n                        geom.vertices.push(new THREE.Vector3(request.verts[i], request.verts[i + 1], request.verts[i + 2]));\n                    }\n                    if (request.colors) {\n                        mobj.material.vertexColors = true;\n                        for (let i = 0; i < request.colors.length; i++) {\n                            geom.colors.push(new THREE.Color(request.colors[i]));\n                        }\n                    }\n                    else {\n                        mobj.material.vertexColors = false;\n                    }\n                    mobj.geometry = geom;\n                }\n                else {\n                    //for some reason this isn't working\n                    //console.log(\"Updating point cloud vertices\");\n                    /*\n                    obj.geometry.dynamic = true;\n                    obj.geometry.verticesNeedUpdate = true;\n                    for(let i=0;i<request.verts.length;i+=3) {\n                       obj.geometry.vertices[i/3] = new THREE.Vector3(request.verts[i],request.verts[i+1],request.verts[i+2]);\n                    }\n                    if(request.colors) {\n                      obj.material.vertexColors = true;\n                      for(let i=0;i<request.colors.length;i++) {\n                        obj.geometry.colors[i] = new THREE.Color(request.colors[i]);\n                      }\n                      obj.geometry.colorsNeedUpdate = true;\n                    }\n                    */\n                }\n            }\n        }\n        else if (request.type == 'add_billboard') {\n            let size = request.size;\n            let geom = new THREE.Geometry();\n            geom.vertices.push(new THREE.Vector3(-size[0] * 0.5, -size[1] * 0.5, 0));\n            geom.vertices.push(new THREE.Vector3(size[0] * 0.5, -size[1] * 0.5, 0));\n            geom.vertices.push(new THREE.Vector3(size[0] * 0.5, size[1] * 0.5, 0));\n            geom.vertices.push(new THREE.Vector3(-size[0] * 0.5, size[1] * 0.5, 0));\n            geom.faces.push(new THREE.Face3(0, 1, 2));\n            geom.faces.push(new THREE.Face3(0, 2, 3));\n            geom.faceVertexUvs[0] = [];\n            geom.faceVertexUvs[0][0] = [new THREE.Vector2(0, 1), new THREE.Vector2(1, 1), new THREE.Vector2(1, 0)];\n            geom.faceVertexUvs[0][1] = [new THREE.Vector2(0, 1), new THREE.Vector2(1, 0), new THREE.Vector2(0, 0)];\n            geom.computeFaceNormals();\n            geom.uvsNeedUpdate = true;\n            let mesh = new THREE.Mesh(geom, new THREE.MeshBasicMaterial());\n            mesh.userData.customSharedMaterialSetup = true;\n            this.addObject(request.name, mesh);\n            let filter = request.filter;\n            let colormap = request.colormap;\n            if (filter == 'nearest')\n                filter = THREE.NearestFilter;\n            else\n                filter = THREE.LinearFilter;\n            if (request.imagedata) {\n                //load from data\n                let w = request.width;\n                let h = request.height;\n                let data = atob(request.imagedata);\n                let format = THREE.LuminanceFormat;\n                if (colormap == 'opacity')\n                    format = THREE.LuminanceFormat; //AlphaFormat;\n                if (data.length == 3 * w * h)\n                    format = THREE.RGBFormat;\n                else if (data.length == 4 * w * h)\n                    format = THREE.RGBAFormat;\n                else {\n                    if (data.length != w * h) {\n                        console.log(\"KLAMPT.rpc: Invalid image data length? \" + data.length);\n                        return;\n                    }\n                }\n                let buffer = new Uint8Array(new ArrayBuffer(data.length));\n                for (let i = 0; i < data.length; i++) {\n                    buffer[i] = data.charCodeAt(i);\n                }\n                let tex = new THREE.DataTexture(buffer, w, h, format, THREE.UnsignedByteType);\n                tex.needsUpdate = true;\n                //tex.minFilter = filter;\n                //tex.magFilter = filter;\n                this._setupBillboard(request.name, tex, size);\n            }\n            else {\n                //load from image\n                // instantiate a loader\n                let loader = new THREE.TextureLoader();\n                var _this = this;\n                // load a resource\n                loader.load(\n                // resource URL\n                request.image, \n                // Function when resource is loaded\n                function (texture) {\n                    texture.minFilter = filter;\n                    texture.magFilter = filter;\n                    _this._setupBillboard(request.name, texture, size);\n                }, \n                // Function called when download progresses\n                function (xhr) {\n                    console.log((xhr.loaded / xhr.total * 100) + '% loaded');\n                }, \n                // Function called when download errors\n                function (xhr) {\n                    console.log('An error happened');\n                });\n            }\n            //create the billboard geometry\n        }\n        else {\n            console.log(\"KLAMPT.rpc: Invalid request: \" + request.type);\n        }\n    }\n    reset_scene() {\n        this.scene.traverse(function (child) {\n            if (!is_undefined_or_null(child.geometry))\n                child.geometry.dispose();\n            if (!is_undefined_or_null(child.material))\n                child.material.dispose();\n        });\n        for (let i = this.scene.children.length - 1; i >= 0; i--) {\n            this.scene.remove(this.scene.children[i]);\n        }\n        this.sceneCache = {};\n        //clear anything named _text_overlay_X\n        let overlayList = [];\n        for (let i = 0; i < this.sceneArea.children.length; i++) {\n            if (this.sceneArea.children[i].id.startsWith(\"_text_overlay_\")) {\n                overlayList.push(this.sceneArea.children[i]);\n                //console.log(\"Removing text item \"+sceneArea.children[i].id);\n            }\n        }\n        for (let i = 0; i < overlayList.length; i++) {\n            this.sceneArea.removeChild(overlayList[i]);\n        }\n        this.scene.add(new THREE.AmbientLight(0xffffff, 0.2));\n        this.scene.add(new THREE.DirectionalLight(0xffffff, 0.9));\n        let AxesHelper = new THREE.AxesHelper(0.2);\n        this.scene.add(AxesHelper);\n        this.extras = new THREE.Group();\n        this.scene.add(this.extras);\n    }\n    update_scene(data) {\n        //console.log(\"new scene has arrived!\");\n        //let dataJ=JSON.parse(data); \n        let dataJ = data;\n        if (dataJ == null) {\n            console.log(\"KLAMPT.update_scene: Unable to parse scene JSON!\");\n            //console.log(data);\n            return;\n        }\n        //need to determine if full scene or just transforms\n        let isFullScene = dataJ.metadata.fullscene;\n        //console.log(\"full scene is: \" + isFullScene);\n        if (isFullScene) {\n            //let t0 = performance.now();\n            this._set_scene(dataJ);\n            //console.log(\"Call to load scene \" + (t1 - t0) + \" milliseconds.\")\n            //scene.traverse ( function (child) {\n            //  console.log(\"found: \" + child.name);\n            //});\n        }\n        else //just apply transforms\n         {\n            //let t0 = performance.now();\n            this._set_transforms(dataJ.object);\n            //let t1 = performance.now();\n            //console.log(\"Call to load tranforms \" + (t1 - t0) + \" milliseconds.\");\n        }\n        let rpc = dataJ.RPC;\n        if (rpc) {\n            //let t1 = performance.now();\n            for (let i = 0; i < rpc.length; i++) {\n                try {\n                    this.rpc(rpc[i]);\n                }\n                catch (err) {\n                    console.log(rpc[i]);\n                    throw err;\n                }\n            }\n            //let t2 = performance.now();\n            if (rpc.length > 0) {\n                //console.log(\"Call to do RPC's \" + (t2 - t1) + \" milliseconds.\")\n            }\n        }\n    }\n    render() {\n        this.renderer.render(this.scene, this.camera);\n    }\n    reset_camera() {\n        this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.1, 1000);\n        this.camera.position.z = 6;\n        this.camera.position.y = 3;\n        if (this.controls != null)\n            this.controls.dispose();\n        this.controls = new three_trackballcontrols_ts_1.TrackballControls(this.camera, this.sceneArea);\n        this.controls.enabled = true;\n        this.controls.rotateSpeed = 1.0;\n        this.controls.zoomSpeed = 1.2;\n        this.controls.panSpeed = 0.8;\n        this.controls.noZoom = false;\n        this.controls.noPan = false;\n        this.controls.staticMoving = true;\n        this.controls.dynamicDampingFactor = 0.3;\n        this.controls.keys = [65, 83, 68];\n        this.controls.addEventListener('change', this._on_camera_change.bind(this));\n        this.controls.addEventListener('start', this._on_camera_move_start.bind(this));\n        this.controls.addEventListener('end', this._on_camera_move_stop.bind(this));\n    }\n    _on_camera_move_start() {\n        if (!this.animating) {\n            this.animating = true;\n            this.animationLoop();\n        }\n    }\n    _on_camera_move_stop() {\n        this.animating = false;\n    }\n    animationLoop() {\n        this.controls.update();\n        if (this.animating)\n            setTimeout(this.animationLoop.bind(this), 20);\n    }\n    _on_camera_change() {\n        this.render();\n        if (this.cameraCallback != null) {\n            //console.log(\"camera change, with callback\");\n            this.cameraCallback();\n        }\n        else {\n            //console.log(\"camera change, W/O callback\");\n        }\n    }\n    set_camera_callback(cb) {\n        this.cameraCallback = cb;\n    }\n    get_camera() {\n        return { up: this.camera.up, target: this.controls.target, position: this.camera.position, near: this.camera.near, far: this.camera.far };\n    }\n    set_camera(data) {\n        this.camera.up.x = data.up.x;\n        this.camera.up.y = data.up.y;\n        this.camera.up.z = data.up.z;\n        this.controls.target.x = data.target.x;\n        this.controls.target.y = data.target.y;\n        this.controls.target.z = data.target.z;\n        this.camera.position.x = data.position.x;\n        this.camera.position.y = data.position.y;\n        this.camera.position.z = data.position.z;\n        this.camera.near = data.near;\n        this.camera.far = data.far;\n        this.controls.update();\n    }\n}\nexports.KlamptFrontend = KlamptFrontend;\n;\n//# sourceMappingURL=KlamptFrontend.js.map","\"use strict\";\n// Copyright (c) Kris Hauser\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MODULE_NAME = exports.MODULE_VERSION = void 0;\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexports.MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexports.MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","\"use strict\";\n// Copyright (c) Kris Hauser\n// Distributed under the terms of the Modified BSD License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KlamptView = exports.KlamptModel = void 0;\nconst base_1 = require(\"@jupyter-widgets/base\");\nconst version_1 = require(\"./version\");\nconst KlamptFrontend_1 = require(\"./KlamptFrontend\");\n// Import the CSS\nrequire(\"../css/widget.css\");\nfunction isEmpty(ob) {\n    // @ts-ignore\n    for (var i in ob) {\n        return false;\n    }\n    return true;\n}\n//let workaround_events = ['mousemove','mousedown','mouseup','touchmove','touchstart','touchend','wheel'];\nlet workaround_events = [''];\nclass KlamptModel extends base_1.DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: KlamptModel.model_name, _model_module: KlamptModel.model_module, _model_module_version: KlamptModel.model_module_version, _view_name: KlamptModel.view_name, _view_module: KlamptModel.view_module, _view_module_version: KlamptModel.view_module_version, _camera: { 'camera is': 'first time in javascript' }, events: [] });\n    }\n}\nexports.KlamptModel = KlamptModel;\nKlamptModel.serializers = Object.assign({}, base_1.DOMWidgetModel.serializers);\nKlamptModel.model_name = 'KlamptModel';\nKlamptModel.model_module = version_1.MODULE_NAME;\nKlamptModel.model_module_version = version_1.MODULE_VERSION;\nKlamptModel.view_name = 'KlamptView'; // Set to null if no view\nKlamptModel.view_module = version_1.MODULE_NAME; // Set to null if no view\nKlamptModel.view_module_version = version_1.MODULE_VERSION;\nclass KlamptView extends base_1.DOMWidgetView {\n    initialize(parameters) {\n        super.initialize(parameters);\n        this.el.classList.add('custom-widget');\n        this.el.addEventListener('mouseover', this);\n        this.el.addEventListener('mouseleave', this);\n        this.el.addEventListener('focusin', this);\n        this.el.addEventListener('focusout', this);\n        this.el.addEventListener('contextmenu', this);\n        this.waitDraw = false;\n        this.pendingRpcs = [];\n        this.handlingEvent = false;\n        this.klamptArea = this.createDiv();\n        this.el.appendChild(this.klamptArea);\n        this.messageArea = document.createElement(\"div\");\n        this.el.appendChild(this.messageArea);\n    }\n    render() {\n        console.log(\"Initialize Klampt frontend\");\n        this.klampt = new KlamptFrontend_1.KlamptFrontend(this.klamptArea);\n        var _this = this;\n        this.klampt.set_camera_callback(function () {\n            var cam = _this.klampt.get_camera();\n            _this.model.set('_camera', cam);\n            _this.touch();\n        });\n        this.model.on('change:scene', this.scene_changed, this);\n        this.model.on('change:transforms', this.transforms_changed, this);\n        this.model.on('change:rpc', this.rpc_changed, this);\n        //this.klampt.resize(this.model.get('width'),this.model.get('height'));\n        //write initial camera to model\n        var cam = this.klampt.get_camera();\n        this.model.set('_camera', cam);\n        var redraw = false;\n        if (!isEmpty(this.model.get('scene'))) {\n            console.log(\"KlamptView.render: scene not empty\");\n            //this.scene_changed();\n            this.klampt.update_scene(this.model.get('scene'));\n            redraw = true;\n        }\n        if (!isEmpty(this.model.get('transforms'))) {\n            console.log(\"KlamptView.render: transforms not empty\");\n            //this.transforms_changed();\n            this.klampt.update_scene(this.model.get('transforms'));\n            redraw = true;\n        }\n        if (!isEmpty(this.model.get('rpc'))) {\n            console.log(\"KlamptView.render: rpc not empty\");\n            //this.rpc_changed();\n            this.do_rpc(this.model.get('rpc'));\n            redraw = true;\n        }\n        if (redraw) {\n            setTimeout(this.redraw.bind(this), 0);\n        }\n    }\n    redraw() {\n        this.klampt.render();\n        this.model.set('drawn', 1);\n        this.touch();\n    }\n    createDiv() {\n        var width = this.model.get('width');\n        var height = this.model.get('height');\n        var div = document.createElement(\"div\");\n        div.style.width = width + \"px\";\n        div.style.height = height + \"px\";\n        return div;\n    }\n    handleEvent(event) {\n        if (this.handlingEvent) {\n            return;\n        }\n        if (event.type == 'keydown')\n            this.keydown(event);\n        else if (event.type == 'keyup')\n            this.keyup(event);\n        else if (event.type == 'focusin' || event.type == 'mouseover')\n            this.startCapture(event);\n        else if (event.type == 'focusout' || event.type == 'mouseleave')\n            this.stopCapture(event);\n        else if (event.type == 'contextmenu') {\n            event.stopPropagation();\n            event.preventDefault();\n        }\n        else if (workaround_events.indexOf(event.type) >= 0) {\n            this.handlingEvent = true;\n            if (event.type.startsWith('mouse')) {\n                let newevent = new MouseEvent(event.type, event);\n                this.klamptArea.dispatchEvent(newevent);\n            }\n            else if (event.type.startsWith('touch')) {\n                let newevent = new TouchEvent(event.type, event);\n                this.klamptArea.dispatchEvent(newevent);\n            }\n            else {\n                let newevent = new WheelEvent(event.type, event);\n                this.klamptArea.dispatchEvent(newevent);\n            }\n            event.stopPropagation();\n            event.preventDefault();\n            this.handlingEvent = false;\n        }\n    }\n    startCapture(event) {\n        let capture_event = true;\n        let tab_index = \"-4242\";\n        ///need to bypass Jupyterlab's event handling\n        document.addEventListener('keydown', this, capture_event);\n        document.addEventListener('keyup', this, capture_event);\n        for (let ev in workaround_events) {\n            document.addEventListener(workaround_events[ev], this, capture_event);\n        }\n        // Try to focus....\n        this.el.focus({ preventScroll: true });\n        if (this.el != document.activeElement) {\n            // We didn't actually focus, so make sure the element can be focused...\n            this.el.setAttribute(\"tabindex\", tab_index);\n            this.el.focus({ preventScroll: true });\n        }\n    }\n    stopCapture(event) {\n        let capture_event = true;\n        let tab_index = \"-4242\";\n        document.removeEventListener('keydown', this, capture_event);\n        document.removeEventListener('keyup', this, capture_event);\n        for (let ev in workaround_events) {\n            document.removeEventListener(workaround_events[ev], this, capture_event);\n        }\n        // Remove the tabindex if we added it...\n        if (this.el.getAttribute(\"tabindex\") == tab_index) {\n            this.el.removeAttribute(\"tabindex\");\n        }\n        this.el.blur();\n    }\n    keydown(event) {\n        console.log(\"Got a keydown event \" + event.keyCode);\n        var events = [...this.model.get('events')];\n        events.push(event);\n        this.model.set('event', events);\n        this.touch();\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    keyup(event) {\n        console.log(\"Got a keyup event \" + event.keyCode);\n        event.stopPropagation();\n        event.preventDefault();\n    }\n    scene_changed() {\n        var msg = this.model.get('scene');\n        console.log(\"Klamp't widget: setting scene\");\n        if (this.waitDraw) {\n            this.klampt.update_scene(msg);\n        }\n        else {\n            var _this = this;\n            this.waitDraw = true;\n            setTimeout(function () {\n                _this.klampt.update_scene(msg);\n                _this.klampt.render();\n                _this.model.set('drawn', 1);\n                _this.touch();\n                _this.waitDraw = false;\n            }, 0);\n        }\n    }\n    transforms_changed() {\n        var msg = this.model.get('transforms');\n        //console.log(\"Klamp't widget: setting transforms\");\n        if (this.waitDraw) {\n            this.klampt.update_scene(msg);\n        }\n        else {\n            var _this = this;\n            this.waitDraw = true;\n            setTimeout(function () {\n                _this.klampt.update_scene(msg);\n                _this.klampt.render();\n                _this.model.set('drawn', 1);\n                _this.touch();\n                _this.waitDraw = false;\n            }, 0);\n        }\n    }\n    do_rpc(msg) {\n        if (msg.type == 'multiple') {\n            for (var i = 0; i < msg.calls.length; i++) {\n                this.do_rpc(msg.calls[i]);\n            }\n        }\n        else if (msg.type == 'reset_scene') {\n            //console.log(\"Klamp't widget: resetting scene\");\n            this.klampt.reset_scene();\n        }\n        else if (msg.type == 'reset_camera') {\n            //console.log(\"Klamp't widget: calling reset_camera\");\n            this.klampt.reset_camera();\n        }\n        else {\n            //console.log(\"Klamp't widget: calling rpc \"+msg);\n            this.klampt.rpc(msg);\n        }\n    }\n    rpc_changed() {\n        var msg = this.model.get('rpc');\n        //console.log(\"rpc \"+msg);\n        if (this.waitDraw) {\n            this.pendingRpcs.push(msg);\n        }\n        else {\n            var _this = this;\n            this.waitDraw = true;\n            setTimeout(function () {\n                _this.do_rpc(msg);\n                for (var i = 0; i < _this.pendingRpcs.length; i++)\n                    _this.do_rpc(_this.pendingRpcs[i]);\n                _this.pendingRpcs = [];\n                _this.klampt.render();\n                _this.model.set('drawn', 1);\n                _this.touch();\n                _this.waitDraw = false;\n            }, 0);\n        }\n    }\n}\nexports.KlamptView = KlamptView;\n//# sourceMappingURL=widget.js.map","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".custom-widget {\\n  background-color: lightseagreen;\\n  padding: 0px 2px;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./widget.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};"],"names":[],"sourceRoot":""}